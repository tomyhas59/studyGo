// ---------------------------
// Prisma Generator 설정
// ---------------------------
generator client {
  // provider: 어떤 Prisma 클라이언트를 생성할지 지정 (보통 "prisma-client-js")
  // output: 생성된 클라이언트의 출력 경로(상대경로). 백엔드 코드에서 import 할 경로로 설정.
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

// ---------------------------
// 데이터 소스 (데이터베이스) 설정
// ---------------------------
datasource db {
  // provider: 사용하는 DB 종류 (여기서는 MySQL)
  provider = "mysql"

  // DATABASE_URL 은 .env에 정의된 연결 문자열을 사용
  // 예: mysql://user:pass@localhost:3306/dbname
  url      = env("DATABASE_URL")
}

// ---------------------------
// User 모델 (사용자)
// ---------------------------
model User {
  // id: 기본 키(primary key). 정수형 자동 증가
  id        Int       @id @default(autoincrement())

  // email: 고유 제약조건. 같은 이메일 중복 불가
  email     String    @unique

  // password: 해시된 패스워드를 저장 (실제 서비스에서는 평문 저장 금지)
  password  String

  // name: 보여줄 사용자 이름(닉네임 등)
  name      String

  // posts: 이 사용자가 작성한 게시글들 (역방향 관계)
  posts     Post[]

  // participants: 사용자가 참가한 모든 참가 레코드 (역방향 관계)
  participants Participant[]

  // comments: 사용자가 작성한 댓글들 (역방향 관계)
  comments  Comment[]

  // createdAt: 생성 시점(자동으로 현재 시각)
  createdAt DateTime  @default(now())

  // updatedAt: 레코드 업데이트 시 자동으로 현재 시각으로 갱신
  updatedAt DateTime  @updatedAt
}

// ---------------------------
// Post 모델 (게시글 / 스터디 정보 등)
// ---------------------------
model Post {
  id           Int           @id @default(autoincrement()) // PK

  // title, content: 게시글 제목/내용
  title        String
  content      String

  // category: 카테고리 문자열 (예: "프론트엔드", "백엔드" 등)
  category     String

  // image: 게시글에 첨부된 이미지 URL (선택적)
  image        String?

  // authorId: 외래키로 User.id를 가리킴
  authorId     Int

  // author: 실제 관계 정의 (fields: authorId 는 외래키 필드, references: User.id)
  author       User          @relation(fields: [authorId], references: [id])

  // participants: 이 게시글의 참여자 레코드들 (역방향 관계)
  participants Participant[]

  // comments: 이 게시글의 댓글들
  comments     Comment[]

  // 생성/수정 타임스탬프
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// ---------------------------
// Participant 모델 (참여자, 스터디 신청/승인 상태 관리)
// ---------------------------
model Participant {
  id        Int       @id @default(autoincrement()) // PK

  // user 관계: 어떤 사용자가 참가했는지 (외래키 userId)
  user      User      @relation(fields: [userId], references: [id])
  userId    Int

  // post 관계: 어느 게시글(study)에 속한 참가자인지 (외래키 postId)
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int

  // status: 참여 상태. enum Status 타입 사용 (PENDING, APPROVED, REJECTED)
  // 기본값은 PENDING (신청 상태)
  status    Status    @default(PENDING)

  // joinedAt: 참가(신청) 시간
  joinedAt  DateTime  @default(now())

  // @@unique: userId와 postId의 조합을 고유하게 만듦
  // -> 같은 사용자가 같은 스터디에 중복으로 참가 신청 못하게 함
  @@unique([userId, postId]) // 같은 사용자가 같은 스터디에 중복 참여 불가
}

// ---------------------------
// Comment 모델 (댓글)
// ---------------------------
model Comment {
  id        Int       @id @default(autoincrement())

  // comment 내용
  content   String

  // 댓글이 달린 게시글(post) 관계
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int

  // 댓글 작성자(author) 관계
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int

  // 생성/수정 타임스탬프
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// ---------------------------
// Status enum (참여 상태)
// ---------------------------
enum Status {
  PENDING   // 신청됨 (프론트에서 "pending"으로 맵핑)
  APPROVED  // 승인됨 ("approved")
  REJECTED  // 거절됨 ("rejected")
}
